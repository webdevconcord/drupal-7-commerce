<?php

/**
 * @file
 * Module implementing a Concord Pay Gateway
 */

include_once(dirname(__FILE__) . '/class/concordpay.cls.php');
/**
 * Constant definitions.
 */
define('COMMERCE_CONCORDPAY_RETURN_URL', 'commerce/concordpay/return');

/**
 * Implements hook menu().
 */
function ns_concordpay_menu()
{
    $items[COMMERCE_CONCORDPAY_RETURN_URL] = array(
        'page callback' => 'ns_concordpay_return_page_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'ns_concordpay.pages.inc',
    );

    return $items;
}

/**
 *  Implements hook_commerce_payment_method_info().
 */
function ns_concordpay_commerce_payment_method_info()
{
    return array(
        'ns_concordpay' => array(
            'title' => t('Concordpay'),
            'description' => t('Оплата картой VISA или Mastercard (ConcordPay)'),
            'terminal' => FALSE,
            'offsite' => TRUE,
            'offsite_autoredirect' => TRUE,
            'active' => TRUE
        ),
    );
}

/**
 * Payment method callback: settings form.
 */
function ns_concordpay_settings_form($settings = NULL)
{
    $settings = (array)$settings + array(
            'merchant_id' => '',
            'secret_key' => '',
            'language' => 'RU',
            'approve_url' => '',
            'decline_url' => '',
            'cancel_url' => '',
            'description' => array('value' => 'Оплата картой VISA или Mastercard (ConcordPay)', 'format' => null)
        );

    $languages = array(
        'RU' => 'Русский',
        'UA' => 'Украинский',
        'EN' => 'Английский'
    );

    $form['merchant_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant ID'),
        '#default_value' => $settings['merchant_id'],
        '#size' => 40,
        '#maxlength' => 150,
        '#required' => TRUE
    );

    $form['secret_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret key'),
        '#default_value' => $settings['secret_key'],
        '#size' => 40,
        '#maxlength' => 100,
        '#required' => TRUE
    );

    $form['language'] = array(
        '#type' => 'select',
        '#title' => t('LANGUAGE'),
        '#default_value' => $settings['language'],
        '#description' => t("Choose language of payment page"),
        '#options' => $languages,
        '#required' => FALSE
    );

    $form['token_tree'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('commerce-order'),
        '#dialog' => TRUE,
    );

    $form['approve_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Approve Url'),
        '#description' => t('URL to redirect the user if payment is successful'),
        '#required' => TRUE
    );

    $form['decline_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Decline Url'),
        '#description' => t('URL to redirect the user if payment is unsuccessful'),
        '#required' => TRUE
    );

    $form['cancel_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Cancel Url'),
        '#description' => t('URL for redirection in case the user refused to make the payment'),
        '#required' => TRUE
    );

    return $form;

}

/**
 * Payment method callback: checkout form.
 */
function ns_concordpay_submit_form($payment_method, $pane_values, $checkout_pane, $order)
{
    $form = array();

    $form['image'] = array(
        '#theme' => 'image',
        '#path' => drupal_get_path('module', 'ns_concordpay') . '/images/concord-logo.png',
        '#alt' => t('Concordpay'),
        '#attributes' => array(
            'class' => array('commerce-concordpay-logo'),
        ),
    );

    $form['desc'] = array(
        '#prefix' => '<div class="commerce-concordpay-payment-description">',
        '#suffix' => '</div>',
        '#markup' => $payment_method['description']
    );

    // http://drupal.org/node/1705862
    $form['dummy'] = array(
        '#type' => 'hidden',
        '#value' => 'dummy',
    );
    return $form;

}

/**
 * Payment method callback: checkout form submission.
 */
function ns_concordpay_submit_form_subimt($payment_method, $pane_form, $pane_values, $order, $charge)
{
    $order->data['ns_concordpay'] = $pane_values;
}

/**
 * Payment method callback: payment redirect form.
 */
function ns_concordpay_redirect_form($form, &$form_state, $order, $payment_method)
{

    global $base_url;

    $cp = new ConcordPay();

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    $amount = $order_wrapper->commerce_order_total->amount->value();
    $amount = commerce_currency_amount_to_decimal($amount, $currency_code);
    // TODO only ua
    $fields = array(
        'operation' => 'Purchase',
        'merchant_id' => $payment_method['settings']['merchant_id'],
        'order_id' => $order->order_id . concordpay::ORDER_SEPARATOR . time(),
        'amount' => $amount,
        'currency_iso' => 'UAH',
        'description' => 'Оплата картой VISA или Mastercard на сайте ',
        'callback_url' => $base_url . '/' . COMMERCE_CONCORDPAY_RETURN_URL,
        'approve_url' => $payment_method['settings']['approve_url'],
        'decline_url' => $payment_method['settings']['decline_url'],
        'cancel_url' => $payment_method['settings']['cancel_url'],
    );

    $fields['signature'] = $cp->getRequestSignature($fields);

    $redirect_form = ns_concordpay_redirect_form_generate($fields, concordpay::URL);
    return $redirect_form;

}

/**
 * Helper function for redirect form build.
 *
 * @param array $data
 *   An array containing the fields for redirect form.
 *
 * @param string $url
 *   Reserved param for future purposes.
 *
 * @return array $form
 *   An array contaaning the form ready to submit.
 */

function ns_concordpay_redirect_form_generate($data, $url = '')
{
    $form['#action'] = concordpay::URL;
    foreach ($data as $k => $v) {
        if (!is_array($v)) {
            $form[$k] = array(
                '#type' => 'hidden',
                '#value' => $v
            );
        } else {
            $i = 0;
            foreach ($v as $sk => $val) {
                $form[$k . '[' . $sk . ']'] = array(
                    '#type' => 'hidden',
                    '#value' => $val
                );
            }
        }
    }

    $form['actions'] = array('#type' => 'actions');

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Pay via ConcordPay')
    );

    return $form;
}

/**
 * Save a new transaction.
 *
 * @param object $order
 *   Order for which the transaction will be saved.
 * @param object $order_wrapper
 *   Order Wrapper for which the transaction will be saved.
 */
function ns_concordpay_create_transaction($order, $order_wrapper)
{
    $transaction = commerce_payment_transaction_new('ns_concordpay', $order->order_id);
    $transaction->instance_id = 'ns_concordpay|commerce_payment_ns_concordpay';
    $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
    $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('The payment has completed.');
    commerce_payment_transaction_save($transaction);
}